/*!
 * \brief Main SObjectizer-5 namespace
 */
namespace so_5
{
	/*!
	 * \brief Public API functions of SObjectizer-5.
	 */
	namespace api
	{
		/*!
		 * \brief Internal implemetation details of public API functions.
		 */
		namespace impl
		{
		} /* namespace so_5::api::impl */

	} /* namespace so_5::api */

	/*!
	 * \since v.5.5.4
	 * \brief Some reusable and low-level classes/functions which can
	 * be used in public header files.
	 */
	namespace details {

		/*!
		 * \since v.5.5.4
		 * \brief Helper templates for detection of lambda-type traits.
		 */
		namespace lambda_traits {

			/*!
			 * \since v.5.5.4
			 * \brief Internal implementation details.
			 */
			namespace impl {

			} /* namespace impl */

		} /* namespace lambda_traits */

		/*!
		 * \since v.5.5.4
		 * \brief Implementation details for implementation of rollback on
		 * exception helper.
		 */
		namespace rollback_on_exception_details {
		} /* namespace rollback_on_exception_details */


	} /* namespace details */


	/*!
	 * \brief Event dispatchers.
	 */
	namespace disp
	{
		/*!
		 * \brief Active groups dispatcher.
		 */
		namespace active_group
		{
			/*!
			 * \brief Active groups dispatcher implemetation details.
			 */
			namespace impl
			{
			} /* namespace impl */

		} /* namespace active_group */

		/*!
		 * \brief Active objects dispatcher.
		 */
		namespace active_obj
		{
			/*!
			 * \brief Active objects dispatcher implemetation details.
			 */
			namespace impl
			{
			} /* namespace impl */

		} /* namespace active_obj */

		/*!
		 * \brief Advanced thread pool dispatcher.
		 */
		namespace adv_thread_pool {

			/*!
			 * \brief Internal implementation details of advanced thread pool dispatcher.
			 */
			namespace impl {

			} /* namespace impl */

		} /* namespace adv_thread_pool */


		/*!
		 * \brief Dispatcher with single working thread.
		 */
		namespace one_thread
		{
			/*!
			 * \brief Implementation details for dispatcher with
			 * single working thread.
			 */
			namespace impl
			{
			} /* namespace impl */

		} /* namespace one_thread */

		/*!
		 * \brief Reusable components for dispatchers.
		 *
		 * This namespace contains classes and functions which can
		 * be reused by various types of dispatchers.
		 */
		namespace reuse
		{
			/*!
			 * \since v.5.5.4
			 * \brief Helpers for manipulation with standard C++ I/O streams.
			 */
			namespace ios_helpers {
			} /* namespace ios_helpers */

			/*!
			 * \brief Implementation of various types of locks to be used
			 * inside dispatchers.
			 */
			namespace locks {
			} /* namespace locks */

			/*!
			 * \since v.5.5.4
			 * \brief Helper tools for implementation of run-time monitoring
			 * for thread-pool-like dispatchers.
			 */
			namespace thread_pool_stats {
			} /* namespace thread_pool_stats */

			/*!
			 * \brief Implemetation details of dispatcher's working thread.
			 */
			namespace work_thread
			{
			} /* namespace work_thread */

		} /* namespace reuse */

		/*!
		 * \brief Thread pool dispatcher.
		 */
		namespace thread_pool {

			/*!
			 * \brief Reusable implementation of some thread pool dispatcher
			 * functionality which can be used in other thread-pool-like dispatchers.
			 */
			namespace common_implementation {
			} /* namespace common_implementation */

			/*!
			 * \brief Internal implementation details of thread pool dispatcher.
			 */
			namespace impl {

			} /* namespace impl */

		} /* namespace thread_pool */

	} /* namespace disp */

	/*!
	 * \brief Implementation details of error_logging facility.
	 */
	namespace log_msg_details {
	} /* namespace log_msg_details */

	/*!
	 * \brief All code related to implementation of SObjectizer run-time.
	 */
	namespace rt
	{
		/*!
		 * \brief Details of SObjectizer run-time implementations.
		 */
		namespace impl
		{
			/*!
			 * \brief Implementation details related to cooperations and
			 * agents repository.
			 */
			namespace agent_core_details {
			} /* namespace agent_core_details */

			/*!
			 * \brief Details of cooperation deregistration implementation
			 */
			namespace coop_dereg
			{
			} /* namespace coop_dereg */

		} /* namespace impl */

		/*!
		 * \since v.5.2.3
		 * \brief Enumeration of cooperation deregistration reasons.
		 */
		namespace dereg_reason
		{
		} /* namespace dereg_reason */

		/*!
		 * \brief Some low-level implemetation details which can be used
		 * in public header files.
		 */
		namespace details {
		} /* namespace details */

		/*!
		 * \since v.5.5.4
		 * \brief All stuff related to message limits.
		 */
		namespace message_limit {

			/*!
			 * \since v.5.5.4
			 * \brief Internal implementation of message limits related stuff.
			 */
			namespace impl {

			} /* namespace impl */

		} /* namespace message_limit */

		/*!
		 * \since v.5.5.4
		 * \brief All stuff related to run-time monitoring and statistics.
		 */
		namespace stats {

			/*!
			 * \since v.5.5.4
			 * \brief Internal implementation of run-time monitoring
			 * and statistics related stuff.
			 */
			namespace impl {

			} /* namespace impl */

			/*!
			 * \since v.5.5.4
			 * \brief Declarations of messages used by run-time monitoring
			 * and statistics.
			 */
			namespace messages {
			} /* namespace messages */

			/*!
			 * \since v.5.5.4
			 * \brief Predefined prefixes of data-sources.
			 */
			namespace prefixes {
			} /* namespace prefixes */

			/*!
			 * \since v.5.5.4
			 * \brief Predefined suffixes of data-sources.
			 */
			namespace suffixes {
			} /* namespace suffixes */

		} /* namespace stats */

	} /* namespace rt */

	/*!
	 * \brief All details related to timers and timer events.
	 */
	namespace timer_thread
	{
		/*!
		 * \brief All code related to implementation of timer via ACE.
		 */
		namespace ace_timer_queue_adapter
		{
			/*!
			 * \brief Details of timer implemetation via ACE.
			 */
			namespace impl
			{
			} /* namespace impl */

		} /* namespace ace_timer_queue_adapter */

	} /* namespace timer_thread */

	/*!
	 * \since v.5.5.0
	 * \brief Timers implementation details.
	 */
	namespace timers_details
	{
	} /* namespace timers_details */

} /* namespace so_5 */

// vim:ft=cpp.doxygen

