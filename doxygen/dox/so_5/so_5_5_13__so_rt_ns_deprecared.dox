/*!

\page so_5_5_13__so_rt_ns_deprecated so-5.5.13: Deprecation of %so_5::rt namespace

Since v.5.5.13 namespace so_5::rt is deprecated. It now contains only several
typedefs for compatibility with previous versions. All the stuff from so_5::rt
is moved into so_5 namespace.

There are almost no changes in names during moving content from so_5::rt to
so_5, except the following cases:

- so_5::coop_t must be used instead of so_5::rt::agent_coop_t;
- so_5::coop_unique_ptr_t must be used instead of so_5::rt::agent_coop_unique_ptr_t;
- so_5::layer_t must be used instead of so_5::rt::so_layer_t (there are also
  new names: so_5::layer_unique_ptr_t, so_5::layer_ref_t and so_5::layer_map_t
  instead of so_5::rt::so_layer_unique_ptr_t, so_5::rt::so_layer_ref_t,
  so_5::rt::so_layer_map_t).

Namespace so_5::rt will be removed from SObjectizer in v.5.6.0. It means
that code which uses SObjectizer must be modified. In most cases modification
will be very simple: a change of so_5::rt prefix to so_5 prefix.

\attention Some code cannot be compiled after switching to v.5.5.13 if the following instructions are used together:
\code
using namespace so_5;
using namespace so_5::rt;
\endcode
It is because the same names (like agent_t) are now defined in both namespaces.
It this case <tt>using namespace so_5::rt</tt> must be removed.

*/

// vim:ft=cpp

